/* eslint-disable @typescript-eslint/naming-convention */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/health/ping': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Ping */
		get: operations['ping_health_ping_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/health/test_db_connection': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Test Db Connection */
		get: operations['test_db_connection_health_test_db_connection_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/subscription/create': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create Subscription */
		post: operations['create_subscription_subscription_create_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/subscription/update/{subscription_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/** Update Subscription */
		put: operations['update_subscription_subscription_update__subscription_id__put'];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/subscription/summary': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get User Subscriptions */
		get: operations['get_user_subscriptions_subscription_summary_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/subscription/detail/{subscription_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get Subscription */
		get: operations['get_subscription_subscription_detail__subscription_id__get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/subscription/delete/{subscription_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete Subscription */
		delete: operations['delete_subscription_subscription_delete__subscription_id__delete'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user/users': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get Users */
		get: operations['get_users_user_users_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/category/create': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create Category */
		post: operations['create_category_category_create_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/category/categories': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get Categories */
		get: operations['get_categories_category_categories_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/category/update/{category_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/** Update Category */
		put: operations['update_category_category_update__category_id__put'];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/expense/create': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create Expense */
		post: operations['create_expense_expense_create_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/expense/all': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get Expenses */
		get: operations['get_expenses_expense_all_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/scope/create': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create Scope */
		post: operations['create_scope_scope_create_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/scope/all/{project_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get Scopes */
		get: operations['get_scopes_scope_all__project_id__get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/scope/update/{scope_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/** Update Scope */
		put: operations['update_scope_scope_update__scope_id__put'];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/scope/delete/{scope_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete Scope */
		delete: operations['delete_scope_scope_delete__scope_id__delete'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/project/create': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create Project */
		post: operations['create_project_project_create_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/project/all': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get Projects */
		get: operations['get_projects_project_all_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/project/detail/{project_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get Project */
		get: operations['get_project_project_detail__project_id__get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/project/update/{project_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/** Update Project */
		put: operations['update_project_project_update__project_id__put'];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/project/delete/{project_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete Project */
		delete: operations['delete_project_project_delete__project_id__delete'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** CategoryCreate */
		CategoryCreate: {
			/** Title */
			title: string;
			type: components['schemas']['CategoryTypeEnum'];
			/** Description */
			description: string;
		};
		/** CategoryResponse */
		CategoryResponse: {
			/** Title */
			title: string;
			type: components['schemas']['CategoryTypeEnum'];
			/** Description */
			description: string;
			/**
			 * Uuid
			 * Format: uuid
			 */
			uuid: string;
		};
		/**
		 * CategoryTypeEnum
		 * @enum {string}
		 */
		CategoryTypeEnum:
			| 'INCOME'
			| 'SUBSCRIPTIONS_AND_MEMBERSHIPS'
			| 'VARIABLE_EXPENSES'
			| 'SAVINGS_AND_INVESTMENTS'
			| 'DEBT_PAYMENTS'
			| 'FIXED_EXPENSES'
			| 'DISCRETIONARY_EXPENSES'
			| 'MISCELLANEOUS';
		/** CategoryUpdate */
		CategoryUpdate: {
			/** Title */
			title?: string | null;
			/** Description */
			description?: string | null;
		};
		/** ExpenseCreate */
		ExpenseCreate: {
			/**
			 * Category Id
			 * Format: uuid
			 */
			category_id: string;
			/** Scope Id */
			scope_id?: string | null;
			/** Title */
			title: string;
			/** Amount */
			amount: number;
			/** Description */
			description?: string | null;
			/** Date */
			date?: string | null;
			/** Currency */
			currency?: string | null;
		};
		/** ExpenseResponse */
		ExpenseResponse: {
			/**
			 * Category Id
			 * Format: uuid
			 */
			category_id: string;
			/** Scope Id */
			scope_id?: string | null;
			/** Title */
			title: string;
			/** Amount */
			amount: number;
			/** Description */
			description?: string | null;
			/** Date */
			date?: string | null;
			/** Currency */
			currency?: string | null;
			/**
			 * Uuid
			 * Format: uuid
			 */
			uuid: string;
			/**
			 * User Id
			 * Format: uuid
			 */
			user_id: string;
		};
		/** HTTPValidationError */
		HTTPValidationError: {
			/** Detail */
			detail?: components['schemas']['ValidationError'][];
		};
		/** ProjectCreate */
		ProjectCreate: {
			/** Project Name */
			project_name: string;
			/** Start Date */
			start_date?: string | null;
			/** End Date */
			end_date?: string | null;
		};
		/** ProjectResponse */
		ProjectResponse: {
			/** Project Name */
			project_name: string;
			/** Start Date */
			start_date?: string | null;
			/** End Date */
			end_date?: string | null;
			/**
			 * Uuid
			 * Format: uuid
			 */
			uuid: string;
			/**
			 * Created At
			 * Format: date-time
			 */
			created_at: string;
			/**
			 * Updated At
			 * Format: date-time
			 */
			updated_at: string;
			/**
			 * Total Spent
			 * @default 0
			 */
			total_spent: number | null;
		};
		/** ProjectUpdate */
		ProjectUpdate: {
			/** Project Name */
			project_name?: string | null;
			/** Start Date */
			start_date?: string | null;
			/** End Date */
			end_date?: string | null;
		};
		/** ScopeCreate */
		ScopeCreate: {
			/** Scope Name */
			scope_name: string;
			/** Description */
			description?: string | null;
			/** Start Date */
			start_date?: string | null;
			/** End Date */
			end_date?: string | null;
			/**
			 * Project Id
			 * Format: uuid
			 */
			project_id: string;
			/**
			 * Budget
			 * @default 0
			 */
			budget: number;
		};
		/** ScopeResponse */
		ScopeResponse: {
			/** Scope Name */
			scope_name: string;
			/** Description */
			description?: string | null;
			/** Start Date */
			start_date?: string | null;
			/** End Date */
			end_date?: string | null;
			/**
			 * Project Id
			 * Format: uuid
			 */
			project_id: string;
			/**
			 * Budget
			 * @default 0
			 */
			budget: number;
			/**
			 * Uuid
			 * Format: uuid
			 */
			uuid: string;
			/**
			 * Created At
			 * Format: date-time
			 */
			created_at: string;
			/**
			 * Updated At
			 * Format: date-time
			 */
			updated_at: string;
			/**
			 * Total Cost
			 * @description Total cost of all expenses in the scope
			 * @default 0
			 */
			total_cost: number | null;
			/**
			 * Expenses
			 * @default []
			 */
			expenses: components['schemas']['ExpenseResponse'][];
		};
		/** ScopeUpdate */
		ScopeUpdate: {
			/** Scope Name */
			scope_name?: string | null;
			/** Description */
			description?: string | null;
			/** Start Date */
			start_date?: string | null;
			/** End Date */
			end_date?: string | null;
			/** Budget */
			budget?: number | null;
		};
		/** SubscriptionCreate */
		SubscriptionCreate: {
			/**
			 * User Id
			 * Format: uuid
			 */
			user_id?: string;
			/** Category Id */
			category_id: string | null;
			/** Name */
			name: string;
			/** Amount */
			amount: number;
			/** Currency */
			currency?: string | null;
			/** Billing Frequency */
			billing_frequency?: string | null;
			/** Start Date */
			start_date?: string | null;
			/** End Date */
			end_date?: string | null;
			/** Next Billing Date */
			next_billing_date?: string | null;
			/**
			 * Auto Renew
			 * @default true
			 */
			auto_renew: boolean | null;
			/** Status */
			status?: string | null;
			/** Payment Method */
			payment_method?: string | null;
			/** Notes */
			notes?: string | null;
			/** Cancellation Date */
			cancellation_date?: string | null;
			/**
			 * Trial Period
			 * @default false
			 */
			trial_period: boolean | null;
			/** Trial End Date */
			trial_end_date?: string | null;
			/** Total Amount Spent */
			total_amount_spent?: number | string | null;
			/** Contract Length */
			contract_length?: string | null;
			/** Contract End Date */
			contract_end_date?: string | null;
			/** Usage Limits */
			usage_limits?: string | null;
			/** Support Contact */
			support_contact?: string | null;
			/** Website Url */
			website_url?: string | null;
		};
		/** SubscriptionResponse */
		SubscriptionResponse: {
			/**
			 * User Id
			 * Format: uuid
			 */
			user_id?: string;
			/** Category Id */
			category_id: string | null;
			/** Name */
			name: string;
			/** Amount */
			amount: number;
			/** Currency */
			currency?: string | null;
			/** Billing Frequency */
			billing_frequency?: string | null;
			/** Start Date */
			start_date?: string | null;
			/** End Date */
			end_date?: string | null;
			/** Next Billing Date */
			next_billing_date?: string | null;
			/**
			 * Auto Renew
			 * @default true
			 */
			auto_renew: boolean | null;
			/** Status */
			status?: string | null;
			/** Payment Method */
			payment_method?: string | null;
			/** Notes */
			notes?: string | null;
			/** Cancellation Date */
			cancellation_date?: string | null;
			/**
			 * Trial Period
			 * @default false
			 */
			trial_period: boolean | null;
			/** Trial End Date */
			trial_end_date?: string | null;
			/** Total Amount Spent */
			total_amount_spent?: string | null;
			/** Contract Length */
			contract_length?: string | null;
			/** Contract End Date */
			contract_end_date?: string | null;
			/** Usage Limits */
			usage_limits?: string | null;
			/** Support Contact */
			support_contact?: string | null;
			/** Website Url */
			website_url?: string | null;
			/**
			 * Uuid
			 * Format: uuid
			 */
			uuid: string;
			/**
			 * Created At
			 * Format: date-time
			 */
			created_at: string;
			/**
			 * Updated At
			 * Format: date-time
			 */
			updated_at: string;
			user: components['schemas']['UserResponse'];
		};
		/** SubscriptionUpdate */
		SubscriptionUpdate: {
			/** Name */
			name?: string | null;
			/** Currency */
			currency?: string | null;
			/** Billing Frequency */
			billing_frequency?: string | null;
			/** Start Date */
			start_date?: string | null;
			/** End Date */
			end_date?: string | null;
			/** Amount */
			amount?: number | null;
			/** Next Billing Date */
			next_billing_date?: string | null;
			/** Auto Renew */
			auto_renew?: boolean | null;
			/** Status */
			status?: string | null;
			/** Payment Method */
			payment_method?: string | null;
			/** Notes */
			notes?: string | null;
			/** Cancellation Date */
			cancellation_date?: string | null;
			/** Trial Period */
			trial_period?: boolean | null;
			/** Trial End Date */
			trial_end_date?: string | null;
			/** Total Amount Spent */
			total_amount_spent?: number | string | null;
			/** Contract Length */
			contract_length?: string | null;
			/** Contract End Date */
			contract_end_date?: string | null;
			/** Usage Limits */
			usage_limits?: string | null;
			/** Support Contact */
			support_contact?: string | null;
			/** Website Url */
			website_url?: string | null;
		};
		/** UserResponse */
		UserResponse: {
			/**
			 * Uuid
			 * Format: uuid
			 */
			uuid: string;
			/** Email */
			email: string;
			role: components['schemas']['UserRole'];
			/** Created At */
			created_at?: string | null;
			/** Updated At */
			updated_at?: string | null;
			/** Subscriptions */
			subscriptions?:
				| components['schemas']['src__schemas__user__SubscriptionsAllResponse'][]
				| null;
		};
		/**
		 * UserRole
		 * @enum {string}
		 */
		UserRole: 'Admin' | 'User' | 'User_Manager' | 'User_Admin' | 'User_Viewer' | 'User_Editor';
		/** ValidationError */
		ValidationError: {
			/** Location */
			loc: (string | number)[];
			/** Message */
			msg: string;
			/** Error Type */
			type: string;
		};
		/** SubscriptionsAllResponse */
		src__schemas__subscription__SubscriptionsAllResponse: {
			/**
			 * Uuid
			 * Format: uuid
			 */
			uuid: string;
			/** Name */
			name: string;
		};
		/** SubscriptionsAllResponse */
		src__schemas__user__SubscriptionsAllResponse: {
			/**
			 * Uuid
			 * Format: uuid
			 */
			uuid: string;
			/** Name */
			name: string;
			/** Amount */
			amount: number;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	ping_health_ping_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
		};
	};
	test_db_connection_health_test_db_connection_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
		};
	};
	create_subscription_subscription_create_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['SubscriptionCreate'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['SubscriptionResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	update_subscription_subscription_update__subscription_id__put: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				subscription_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['SubscriptionUpdate'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['SubscriptionResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_user_subscriptions_subscription_summary_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['src__schemas__subscription__SubscriptionsAllResponse'][];
				};
			};
		};
	};
	get_subscription_subscription_detail__subscription_id__get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				subscription_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['SubscriptionResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	delete_subscription_subscription_delete__subscription_id__delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				subscription_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_users_user_users_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UserResponse'][];
				};
			};
		};
	};
	create_category_category_create_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['CategoryCreate'];
			};
		};
		responses: {
			/** @description Successful Response */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_categories_category_categories_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['CategoryResponse'][];
				};
			};
		};
	};
	update_category_category_update__category_id__put: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				category_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['CategoryUpdate'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['CategoryResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	create_expense_expense_create_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['ExpenseCreate'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ExpenseResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_expenses_expense_all_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ExpenseResponse'][];
				};
			};
		};
	};
	create_scope_scope_create_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['ScopeCreate'];
			};
		};
		responses: {
			/** @description Successful Response */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ScopeResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_scopes_scope_all__project_id__get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				project_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ScopeResponse'][];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	update_scope_scope_update__scope_id__put: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				scope_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['ScopeUpdate'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ScopeResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	delete_scope_scope_delete__scope_id__delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				scope_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	create_project_project_create_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['ProjectCreate'];
			};
		};
		responses: {
			/** @description Successful Response */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ProjectResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_projects_project_all_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ProjectResponse'][];
				};
			};
		};
	};
	get_project_project_detail__project_id__get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				project_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ProjectResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	update_project_project_update__project_id__put: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				project_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['ProjectUpdate'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ProjectResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	delete_project_project_delete__project_id__delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				project_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
}
